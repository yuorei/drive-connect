// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: board.proto

package grpc_board

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BoardService_CreateBoard_FullMethodName    = "/board.BoardService/CreateBoard"
	BoardService_ReadBoard_FullMethodName      = "/board.BoardService/ReadBoard"
	BoardService_ReadAllBoard_FullMethodName   = "/board.BoardService/ReadAllBoard"
	BoardService_UpdateBoard_FullMethodName    = "/board.BoardService/UpdateBoard"
	BoardService_DeleteBoard_FullMethodName    = "/board.BoardService/DeleteBoard"
	BoardService_CreateComment_FullMethodName  = "/board.BoardService/CreateComment"
	BoardService_ReadComment_FullMethodName    = "/board.BoardService/ReadComment"
	BoardService_ReadAllComment_FullMethodName = "/board.BoardService/ReadAllComment"
	BoardService_UpdateComment_FullMethodName  = "/board.BoardService/UpdateComment"
	BoardService_DeleteComment_FullMethodName  = "/board.BoardService/DeleteComment"
)

// BoardServiceClient is the client API for BoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoardServiceClient interface {
	CreateBoard(ctx context.Context, in *Board, opts ...grpc.CallOption) (*Board, error)
	ReadBoard(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Board, error)
	ReadAllBoard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoardList, error)
	UpdateBoard(ctx context.Context, in *Board, opts ...grpc.CallOption) (*Board, error)
	DeleteBoard(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	ReadComment(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Comment, error)
	ReadAllComment(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CommentList, error)
	UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error)
	DeleteComment(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type boardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoardServiceClient(cc grpc.ClientConnInterface) BoardServiceClient {
	return &boardServiceClient{cc}
}

func (c *boardServiceClient) CreateBoard(ctx context.Context, in *Board, opts ...grpc.CallOption) (*Board, error) {
	out := new(Board)
	err := c.cc.Invoke(ctx, BoardService_CreateBoard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) ReadBoard(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Board, error) {
	out := new(Board)
	err := c.cc.Invoke(ctx, BoardService_ReadBoard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) ReadAllBoard(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BoardList, error) {
	out := new(BoardList)
	err := c.cc.Invoke(ctx, BoardService_ReadAllBoard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) UpdateBoard(ctx context.Context, in *Board, opts ...grpc.CallOption) (*Board, error) {
	out := new(Board)
	err := c.cc.Invoke(ctx, BoardService_UpdateBoard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) DeleteBoard(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BoardService_DeleteBoard_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) CreateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, BoardService_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) ReadComment(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, BoardService_ReadComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) ReadAllComment(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CommentList, error) {
	out := new(CommentList)
	err := c.cc.Invoke(ctx, BoardService_ReadAllComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) UpdateComment(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Comment, error) {
	out := new(Comment)
	err := c.cc.Invoke(ctx, BoardService_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) DeleteComment(ctx context.Context, in *ID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BoardService_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoardServiceServer is the server API for BoardService service.
// All implementations must embed UnimplementedBoardServiceServer
// for forward compatibility
type BoardServiceServer interface {
	CreateBoard(context.Context, *Board) (*Board, error)
	ReadBoard(context.Context, *ID) (*Board, error)
	ReadAllBoard(context.Context, *emptypb.Empty) (*BoardList, error)
	UpdateBoard(context.Context, *Board) (*Board, error)
	DeleteBoard(context.Context, *ID) (*emptypb.Empty, error)
	CreateComment(context.Context, *Comment) (*Comment, error)
	ReadComment(context.Context, *ID) (*Comment, error)
	ReadAllComment(context.Context, *emptypb.Empty) (*CommentList, error)
	UpdateComment(context.Context, *Comment) (*Comment, error)
	DeleteComment(context.Context, *ID) (*emptypb.Empty, error)
	mustEmbedUnimplementedBoardServiceServer()
}

// UnimplementedBoardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBoardServiceServer struct {
}

func (UnimplementedBoardServiceServer) CreateBoard(context.Context, *Board) (*Board, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBoard not implemented")
}
func (UnimplementedBoardServiceServer) ReadBoard(context.Context, *ID) (*Board, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadBoard not implemented")
}
func (UnimplementedBoardServiceServer) ReadAllBoard(context.Context, *emptypb.Empty) (*BoardList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllBoard not implemented")
}
func (UnimplementedBoardServiceServer) UpdateBoard(context.Context, *Board) (*Board, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBoard not implemented")
}
func (UnimplementedBoardServiceServer) DeleteBoard(context.Context, *ID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBoard not implemented")
}
func (UnimplementedBoardServiceServer) CreateComment(context.Context, *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedBoardServiceServer) ReadComment(context.Context, *ID) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadComment not implemented")
}
func (UnimplementedBoardServiceServer) ReadAllComment(context.Context, *emptypb.Empty) (*CommentList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllComment not implemented")
}
func (UnimplementedBoardServiceServer) UpdateComment(context.Context, *Comment) (*Comment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedBoardServiceServer) DeleteComment(context.Context, *ID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedBoardServiceServer) mustEmbedUnimplementedBoardServiceServer() {}

// UnsafeBoardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoardServiceServer will
// result in compilation errors.
type UnsafeBoardServiceServer interface {
	mustEmbedUnimplementedBoardServiceServer()
}

func RegisterBoardServiceServer(s grpc.ServiceRegistrar, srv BoardServiceServer) {
	s.RegisterService(&BoardService_ServiceDesc, srv)
}

func _BoardService_CreateBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Board)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).CreateBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_CreateBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).CreateBoard(ctx, req.(*Board))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_ReadBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).ReadBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_ReadBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).ReadBoard(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_ReadAllBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).ReadAllBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_ReadAllBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).ReadAllBoard(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_UpdateBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Board)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).UpdateBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_UpdateBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).UpdateBoard(ctx, req.(*Board))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_DeleteBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).DeleteBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_DeleteBoard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).DeleteBoard(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).CreateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_ReadComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).ReadComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_ReadComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).ReadComment(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_ReadAllComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).ReadAllComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_ReadAllComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).ReadAllComment(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).UpdateComment(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BoardService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).DeleteComment(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// BoardService_ServiceDesc is the grpc.ServiceDesc for BoardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "board.BoardService",
	HandlerType: (*BoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBoard",
			Handler:    _BoardService_CreateBoard_Handler,
		},
		{
			MethodName: "ReadBoard",
			Handler:    _BoardService_ReadBoard_Handler,
		},
		{
			MethodName: "ReadAllBoard",
			Handler:    _BoardService_ReadAllBoard_Handler,
		},
		{
			MethodName: "UpdateBoard",
			Handler:    _BoardService_UpdateBoard_Handler,
		},
		{
			MethodName: "DeleteBoard",
			Handler:    _BoardService_DeleteBoard_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _BoardService_CreateComment_Handler,
		},
		{
			MethodName: "ReadComment",
			Handler:    _BoardService_ReadComment_Handler,
		},
		{
			MethodName: "ReadAllComment",
			Handler:    _BoardService_ReadAllComment_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _BoardService_UpdateComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _BoardService_DeleteComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "board.proto",
}
